---【程序说明】---
（1）程序摘要：基于BIOS的STM32L431工程
（2）运行芯片：本工程基于BIOS运行,不从0启动
（3）软件环境：AHL-GEC-IDE，兼容STM32cubeIDE
（4）硬件环境：AHL-STM32L431，实质是只要是STM32L431即可，
              接AHL-GEC扩展板，有三色灯指示
（5）硬件连接：见"..\05_UserBoard\user"文件
（6）功能简述：
			  ①在 RT-Thread启动后创建了红灯、绿灯和蓝灯三个用户线程
              ② 绿灯线程先等待事件字，然后蓝灯设置绿灯事件字；
			  ③ 绿灯线程等待到事件字，转换绿灯状态；
	          ④ 红灯线程等待事件字，然后蓝灯设置红灯事件字，转换红灯状态。
 
 
 ---20210127-修改说明
（1）增加RTOS启动入口文件OsFunc.c与OsFunc.h
（2）07文件夹中main函数修改为：
         OS_start(app_init);  //启动RTOS并执行主线程app_init
（3）07文件夹中includes.h文件注释#include "rtthread.h"，添加#include "OsFunc.h"
（4）03_MCU文件夹中启动文件“../xxx.s”修改“bl entry”为“bl	main”
（5）..src/components.c文件中
           注释原有rtthread_startup函数、rt_application_init函数、entry函数
 (6)OsFunc.c与OsFunc.h文件、02_CPU文件夹下context_gcc.S、与原有RT-Thread源代码08_RT-Thread文件夹全部
    移到06_SoftComponent文件夹RT-Thread_Src下
（7）修改gec.c，添加
    #if (RTThread_Start!=1)       
        user[BIOS_SVC_IRQn]=(uint32_t)bios[BIOS_SVC_IRQn];
		user[BIOS_PendSV_Handler]=(uint32_t)bios[BIOS_PendSV_Handler];
		user[BIOS_SysTick_Handler]=(uint32_t)bios[BIOS_SysTick_Handler];
    #endif 
    gec.h文件中添加
    #define BIOS_SVC_IRQn            (11)
    #define BIOS_PendSV_Handler      (14)
    #define BIOS_SysTick_Handler     (15)
（9）09文件夹内容移到07文件夹，修改07文件夹为07_AppPrg  
 
 
---【何把User程序改为直接从零启动程序（只有两处）】---
   （1）03_MCU文件夹中的.ld中，
        GEC_USER_SECTOR_START  =0;    /*USER程序开始扇区号*/
   （2）04_GEC文件夹中gec.h文件
         #define GEC_USER_SECTOR_START    (0)  
    这样的程序，删除Debug,重新编译后，使用SWD写入器下载，直接运行，不需要BIOS
         


---移植规则---【20200806】
不同芯片BIOS及User框架基本规则
02_CPU 该文件夹除cpu.h之外，其他文件BIOS工程与User工程同
       cpu.h 变动（1）～（2），根据MCU型号变动
03_MCU mcu.h 变动（1）～（3）,根据MCU型号变动，且BIOS工程与User工程同
             在该文件中修改MCU型号及BIOS版本号
       .ld文件：根据MCU型号变动,且BIOS工程与User工程不同
       .s文件：改动类似BSS处，且BIOS工程与User工程不同
04_GEC 各芯片BIOS工程一致，
       各芯片User工程一致，但同芯片BIOS与User工程的04_GEC
       内容不同
05_UserBoard BIOS中除去User.h根据MCU型号变动，其他文件相同
06、07文件夹：各芯片BIOS相同，同功能的User相同


---版本历史---

【20200830】 V3.5  规范程序，规范对于User模板，适应RTOS
【20200829】 V3.4  复位后重置动态命令
【20200812】修改.s文件，缺省中断，直接返回
【20200630】（1）获取对应芯片的官方工程样例。
            （2）参照本BIOS标准工程，整理工程文件夹结构。
                 01_Doc：存放makefile文件和其他说明文档
                 02_CPU：存放内核头文件。
                         复制本工程中的cpu.h，根据可移植性标识
                         对【变动】部分加以改动，使之适应目标芯片。
                 03_MCU：存放链接文件、启动文件和基本驱动（gpio、uart、flash）。
                         复制本工程中的mcu.h，根据可移植性标识对【变动】部分加以改动，
                         使之适应目标芯片。
                         链接文件的修改：复制本工程链接文件的第（1）部分并加以改动，
                         使之适应目标芯片。Flash字段中各分段的赋值方式直接拷贝本工
                         程链接文件的第（2）部分。Section字段将本工程的第（3）部分
                         中头部的【固定】部分复制并添加至头部。
                         参照标准工程链接文件将存储空间分为对应的分段。
                         其中BIOS分段的大小在编译后根据程序大小，取最小的值。
                         动态命令分段、构建函数列表分段均取4KB大小左右，视存储空间大小，
                         构建函数代码分段可取10KB及以上。
                         在对应的SECTIONS断中同样对各个分段给出对应的定义。
                 04_GEC、05_UserBoard、06_SoftComponent、07_NosPrg直接拷贝。
                         对gec.h和user.h中【变动】部分加以改动，使之适应目标芯片
【20200526】V3.0 （1）MCU_TYPE改为3.0；（2）删除mcu.h中无用定义；
                 （3）修改类型转换构件名及内部函数名